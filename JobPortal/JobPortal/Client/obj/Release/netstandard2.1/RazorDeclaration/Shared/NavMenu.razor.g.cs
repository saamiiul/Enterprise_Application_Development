// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace JobPortal.Client.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\samiu\OneDrive\Desktop\Enterprise_Application_Development\JobPortal\JobPortal\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\samiu\OneDrive\Desktop\Enterprise_Application_Development\JobPortal\JobPortal\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\samiu\OneDrive\Desktop\Enterprise_Application_Development\JobPortal\JobPortal\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\samiu\OneDrive\Desktop\Enterprise_Application_Development\JobPortal\JobPortal\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\samiu\OneDrive\Desktop\Enterprise_Application_Development\JobPortal\JobPortal\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\samiu\OneDrive\Desktop\Enterprise_Application_Development\JobPortal\JobPortal\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\samiu\OneDrive\Desktop\Enterprise_Application_Development\JobPortal\JobPortal\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\samiu\OneDrive\Desktop\Enterprise_Application_Development\JobPortal\JobPortal\Client\_Imports.razor"
using JobPortal.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\samiu\OneDrive\Desktop\Enterprise_Application_Development\JobPortal\JobPortal\Client\_Imports.razor"
using JobPortal.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\samiu\OneDrive\Desktop\Enterprise_Application_Development\JobPortal\JobPortal\Client\_Imports.razor"
using JobPortal.Client.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\samiu\OneDrive\Desktop\Enterprise_Application_Development\JobPortal\JobPortal\Client\_Imports.razor"
using JobPortal.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\samiu\OneDrive\Desktop\Enterprise_Application_Development\JobPortal\JobPortal\Client\_Imports.razor"
using JobPortal.Client.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\samiu\OneDrive\Desktop\Enterprise_Application_Development\JobPortal\JobPortal\Client\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\samiu\OneDrive\Desktop\Enterprise_Application_Development\JobPortal\JobPortal\Client\_Imports.razor"
using System.ComponentModel.DataAnnotations;

#line default
#line hidden
#nullable disable
    public partial class NavMenu : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 284 "C:\Users\samiu\OneDrive\Desktop\Enterprise_Application_Development\JobPortal\JobPortal\Client\Shared\NavMenu.razor"
       
    async Task showCandidate()
    {
        await JsRuntime.InvokeVoidAsync(identifier: "candidate");
        Model.MyCandidateState = new Candidate();
    }
    async Task showCompany()
    {
        await JsRuntime.InvokeVoidAsync(identifier: "company");
    }
    async Task candidateSignUp()
    {
        await JsRuntime.InvokeVoidAsync(identifier: "candidateSignUpShow");
    }
    async Task companySignUp()
    {
        await JsRuntime.InvokeVoidAsync(identifier: "companySignUpShow");
    }
    protected async Task onAfterRenderAsync()
    {
        await JsRuntime.InvokeVoidAsync("scroll");
    }



    Candidate candidateObj = new Candidate();
    string confirmPassword = "";
    string passwordMsg = "";
    string successful = "";
    bool candidateMessage = false;
    bool showModal = true;
    bool showSignModal = true;
    Candidate[] candidates;
    Company[] companies;
    bool uniqueCand = true;
    bool passwordNotTrue = false;
    bool signUp = false;
    bool uniqueEmail = false;
    bool passwordNotTrueCom = false;
    bool signUpCom = false;
    bool uniqueEmailCom = false;
    protected override async Task OnInitializedAsync()
    {
        candidateObj = new Candidate();
        company = new Company();
    }
    public async Task<bool> getCandidate(Candidate candidateOB)
    {
        result =await Http.GetStringAsync("odata/candidate");
        candidates = Newtonsoft.Json.JsonConvert.DeserializeObject<ODataCandidate<Candidate>>(result).Value.ToArray();
        Candidate[] candidateList = new Candidate[(candidates.Length)];
        candidateList = candidates;
        foreach (Candidate can in candidates)
        {
            if (candidateOB.CandidateEmail == can.CandidateEmail)
            {
                return true;
            }
        }
        return false ;
    }

    public async Task AddCandidate()
    {
        if (candidateObj.CandidatePassord == confirmPassword)
        {
            bool unique = true;
            result = await Http.GetStringAsync("odata/candidate");
            candidates = Newtonsoft.Json.JsonConvert.DeserializeObject<ODataCandidate<Candidate>>(result).Value.ToArray();
            Candidate[] candidateList = new Candidate[(candidates.Length)];
            candidateList = candidates;
            foreach (Candidate can in candidateList)
            {
                if (candidateObj.CandidateEmail == can.CandidateEmail)
                {
                    unique = false;
                }
            }
            if(unique)
            {
                successful = "";
                await Http.PostAsJsonAsync<Candidate>("api/Add", candidateObj);
                successful = "Successfully Sign Up";
                candidateObj = new Candidate();
                showSignModal = false;
                confirmPassword = "";
                signUp = true;
                uniqueEmail = false;
                passwordNotTrue = false;
            }
            else
            {
                successful = "Please Enter Unique Email";
                uniqueEmail = true;
            }
        }
        else
        {
            passwordNotTrue = true;
            passwordMsg = "You enter Wrong Password";
            confirmPassword = "";
            candidateObj.CandidatePassord = "";
        }
        candidateMessage = true;
    }

    Company company = new Company();
    string confirmCompanyPassword = "";
    string passwordCompanyMsg = "";
    string successfulCompany = "";
    bool companyMessage = false;
    bool uniqueCom = false;
    public bool companyUnique(Company companyOB)
    {
        foreach (Company com in companies)
        {
            if (com.CompanyName==companyOB.CompanyName||com.CompanyEmail==companyOB.CompanyEmail)
            {
                uniqueCom = false;
            }
        }
        return uniqueCom;
    }

    public async Task AddCompany()
    {
        if (company.CompanyPassword == confirmCompanyPassword)
        {
            bool unique = true;
            result = await Http.GetStringAsync("odata/companies");
            companies = Newtonsoft.Json.JsonConvert.DeserializeObject<ODataCandidate<Company>>(result).Value.ToArray();
            Company[] companiesList = new Company[companies.Length];
            companiesList = companies;
            foreach (Company com in companiesList)
            {
                if (com.CompanyName == company.CompanyName || com.CompanyEmail == company.CompanyEmail)
                {
                    unique = false;
                }
            }
            if (unique)
            {
                string que = $"api/CompanyCrud";
                await Http.PostAsJsonAsync<Company>(que, company);
                successfulCompany = "Successfully Sign Up";
                company = new Company();
                confirmPassword = "";
                signUpCom = true;
                uniqueEmailCom = false;
                passwordNotTrueCom = false;
            }
            else
            {
                successfulCompany = "Please Enter Unique Name and Email";
                uniqueEmailCom = true;
                signUpCom = false;
                passwordNotTrueCom = false;
            }

        }
        else
        {
            passwordCompanyMsg = "You enter Wrong Password";
            confirmPassword = "";
            company.CompanyPassword = "";
            passwordNotTrueCom = true;
            uniqueEmailCom = false;
            signUpCom = false;
        }
        companyMessage = true;

    }


    public string result = "";
    public async Task checkCandidate()
    {
        string que = $"odata/candidate?$filter=candidateEmail eq '" + candidateLogin.CandidateEmail + "'";
        result = await Http.GetStringAsync(que);
        Candidate[] candidates = Newtonsoft.Json.JsonConvert.DeserializeObject<ODataCandidate<Candidate>>(result).Value.ToArray();
        if (candidates.Length == 0)
        {
            successful = "Wrong Credentials";

        }
        else
        {
            if (candidates[0].CandidateEmail == candidateLogin.CandidateEmail && candidateLogin.CandidatePassord == candidates[0].CandidatePassord)
            {
                candidateLogin = new Candidate();
                Model.MyCandidateState = new Candidate();
                Model.MyCandidateState = candidates[0];
                result = Model.MyCandidateState.CandidateName;
                CandidateLoginServiceModel.MyCandidateLogin = true;
                showModal = false;
            }
            else
            {
                successful = "Not Found";
            }
        }
        candidateMessage = true;

    }
    public Candidate candidateLogin = new Candidate();
    public Company companyLogin = new Company();

    public string resultCompany = "";
    public async Task checkCompany()
    {
        string que = $"odata/companies?$filter=companyEmail eq '" + companyLogin.CompanyEmail + "'";
        resultCompany = await Http.GetStringAsync(que);
        Company[] companies = Newtonsoft.Json.JsonConvert.DeserializeObject<ODataCandidate<Company>>(resultCompany).Value.ToArray();
        if (companies.Length == 0)
        {
            successfulCompany = "Wrong Credentials";
        }
        else
        {
            if (companies[0].CompanyEmail == companyLogin.CompanyEmail && companyLogin.CompanyPassword == companies[0].CompanyPassword)
            {

                companyLogin = new Company();
                CompanyModel.MyCompanyState = new Company();
                CompanyModel.MyCompanyState = companies[0];
                resultCompany = CompanyModel.MyCompanyState.CompanyPassword;
                CompanyLoginServiceModel.MyCompanyLogin = true;
                showModal = false;
            }
            else
            {
                successfulCompany = "Not Found";
            }
        }
        companyMessage = true;

    }
    public void LoginMessages()
    {
        candidateMessage = false;
        companyMessage = false;
        showModal = true;
        candidateLogin = new Candidate();
        companyLogin = new Company();

    }
    public void SignMessages()
    {
        candidateMessage = false;
        companyMessage = false;
        showSignModal = true;
        candidateObj = new Candidate();
        signUp = false;
        passwordNotTrue = false;
        uniqueEmailCom = false;
        uniqueEmail = false;
        signUpCom = false;
        passwordNotTrueCom = false;
        company = new Company();
        confirmPassword = "";
        confirmCompanyPassword = "";
    }

    public void LogOut()
    {
        CandidateLoginServiceModel.MyCandidateLogin = false;
        CompanyLoginServiceModel.MyCompanyLogin = false;
    }



#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CompanyLoginService CompanyLoginServiceModel { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CandidateLoginService CandidateLoginServiceModel { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CompanyStateService CompanyModel { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CandidateStateService Model { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
    }
}
#pragma warning restore 1591
